#
# This file was generated! Edits made directly to this file may be lost.
#   Timestamp:    2019-09-10
#
# RAPIDS Dockerfile for Ubuntu "devel" image
#
# RAPIDS is built from-source and installed in the base conda environment. The
# sources and toolchains to build RAPIDS are included in this image. RAPIDS
# jupyter notebooks are also provided, as well as jupyterlab and all the
# dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.0
ARG CUDA_VER=${CUDA_VERSION}
ARG LINUX_VERSION=ubuntu18.04
ARG PYTHON_VERSION=3.7

FROM gpuci/miniconda-cuda-rapidsenv:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}-py${PYTHON_VERSION}

# devel environment config args
ARG CC_VERSION=7
ARG CXX_VERSION=7

# devel environment core build pkgs
ARG BOOST_CPP_VERSION=1.70.0
ARG CMAKE_VERSION=3.14.5
ARG LIBGFORTRAN_NG_VERSION=7.3.0
ARG NUMBA_VERSION=0.45.1
ARG NUMPY_VERSION=1.16.4
ARG PANDAS_VERSION=0.24.2

# notebook pkgs
ARG IPYTHON_VERSION=7.3*

# base/runtime install specs
ARG DASK_XGBOOST_CONDA_VERSION_SPEC=0.2*
ARG RAPIDS_CONDA_VERSION_SPEC=0.9*
ARG XGBOOST_CONDA_VERSION_SPEC=0.90.rapidsdev1
ARG XGBOOST_CONDA_LABEL=rapidsai/label/xgboost
ARG XGBOOST_VERSION=0.90

ARG CUDA_VERSION
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG CUDA_VER
ARG PARALLEL_LEVEL
ARG PYTHON_VERSION

ENV CC=/usr/bin/gcc-${CC_VERSION}
ENV CXX=/usr/bin/g++-${CXX_VERSION}
ENV CUDAHOSTCXX=$CXX
ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}
ENV RAPIDS_DIR=/rapids
ENV LD_LIBRARY_PATH=/opt/conda/envs/rapids/lib:${LD_LIBRARY_PATH}

# Install local gcc
# Update and add pkgs
RUN apt-get update \
    && apt-get install -y \
      gcc-${CC_VERSION} \
      g++-${CXX_VERSION} \
    && rm -rf /var/lib/apt/lists/*

# Update environment to use new gcc
ENV CC=/usr/bin/gcc-${CC_VERSION}
ENV CXX=/usr/bin/g++-${CXX_VERSION}
ENV CUDAHOSTCXX=/usr/bin/g++-${CXX_VERSION}
ENV PATH=${PATH}:/conda/bin

# Install core pkgs for development (these will not be overwritten by next install)
RUN source activate rapids \
    && env \
    && conda list \
    && conda install -y -n rapids --freeze-installed --override-channels \
      -c rapidsai \
      -c rapidsai-nightly \
      -c nvidia \
      -c ${XGBOOST_CONDA_LABEL} \
      -c numba \
      -c conda-forge \
      -c anaconda \
      boost-cpp=${BOOST_CPP_VERSION} \
      cmake=${CMAKE_VERSION} \
      cmake_setuptools">=0.1.3" \
      double-conversion \
      dlpack \
      flatbuffers \
      hypothesis \
      lapack \
      rapidsai::libclang \
      libcumlprims \
      libgfortran-ng=${LIBGFORTRAN_NG_VERSION} \
      liblapack \
      make \
      numba">=${NUMBA_VERSION}" \
      numpy=${NUMPY_VERSION} \
      pandas=${PANDAS_VERSION} \
      pytest \
      rapidjson \
    && conda clean -afy \
    && chmod -R ugo+w /opt/conda

# Special case: libcumlmg is not available for CUDA 9.2
RUN if [ "${CUDA_VER}" != "9.2" ]; then conda install -y --no-deps -c nvidia -c conda-forge libcumlmg; fi

# Install dependencies for builds
# Install deps for all pkgs and remove the pkgs that were installed due to 
# cross library deps. Also do not clean/chmod at end to save time as the
# notebook conda install will do the needed cleanup
RUN source activate rapids \
    && env \
    && conda list \
    && conda install -y -n rapids --freeze-installed --override-channels --only-deps \
         -c rapidsai \
         -c rapidsai-nightly \
         -c nvidia \
         -c ${XGBOOST_CONDA_LABEL} \
         -c numba \
         -c conda-forge \
         cudf=${RAPIDS_CONDA_VERSION_SPEC} \
         cuml=${RAPIDS_CONDA_VERSION_SPEC} \
         cugraph=${RAPIDS_CONDA_VERSION_SPEC} \
         dask-cuda=${RAPIDS_CONDA_VERSION_SPEC} \
         dask-xgboost=${DASK_XGBOOST_CONDA_VERSION_SPEC} \
         xgboost=${XGBOOST_VERSION} \
    && conda remove --force \
         rmm librmm \
         nvstrings libnvstrings \
         cudf dask-cudf libcudf \
         cuml libcuml \
         cugraph libcugraph \
         xgboost py-xgboost libxgboost

# 'rapidsdevtool.sh buildDockerImage' sets up the build context, including the
#  rapids directory being COPY'd below. See rapidsdevtool.sh help for details.
RUN mkdir -p ${RAPIDS_DIR}
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the repoSettings file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/opt/conda/envs/rapids

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN cd ${RAPIDS_DIR}/rmm && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cudf && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuml && \
    source activate rapids && \
    ./build.sh --allgpuarch --multigpu libcuml cuml prims
RUN cd ${RAPIDS_DIR}/cugraph && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-cuda

COPY supportfiles/.run_in_rapids /.run_in_rapids
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids" ]

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Add notebook dependencies
# Install the notebook dependencies and the notebook repo
RUN source activate rapids \
    && env \
    && conda list \
    && conda install -y -n rapids --freeze-installed --override-channels \
      -c numba \
      -c conda-forge \
      -c anaconda \
      bokeh \
      dask-labextension \
      dask-ml \
      ipython=${IPYTHON_VERSION} \
      jupyterlab=1.0.7 \
      matplotlib \
      networkx \
      nodejs \
      scikit-learn \
      scipy \
      seaborn \
      tensorflow \
      umap-learn \
   && conda clean -afy \
   && chmod -R ugo+w /opt/conda \
   && pip install "git+https://github.com/jacobtomlinson/jupyterlab-nvdashboard.git#v0.1.9" --upgrade \
   && jupyter labextension install dask-labextension jupyterlab-nvdashboard \
   && cd ${RAPIDS_DIR} \
   && ./clone.sh notebooks \
   && chmod -R ugo+w /opt/conda ${RAPIDS_DIR}

# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Change the entrypoint to start the Jupyter server prior to running commands
COPY supportfiles/.start_jupyter_run_in_rapids /.run_in_rapids

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.ubuntu-devel /Dockerfile.ubuntu-devel
